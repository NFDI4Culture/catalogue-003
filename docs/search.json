[
  {
    "objectID": "index.html#part-of-the-series-italian-art",
    "href": "index.html#part-of-the-series-italian-art",
    "title": "Italian Art",
    "section": "Part of the series: Italian Art",
    "text": "Part of the series: Italian Art\nProgramme instructions\n2023-03-17 v1.0\nDieses SPARQL-Query wird verwendet, um eine Liste von Gemälden abzurufen, die von italienischen Künstlern geschaffen wurden und deren Ursprungsort in Italien liegt.\nExample publications:\n\nExhibition Catalogue (Work in progress) - https://nfdi4culture.github.io/catalogue-003/ (content from the current repo)\nExhibition catalogue demo: toc Baroque /toc from Experimental Books – Re-imagining Scholarly Publishing, COPIM. Workshop URL: https://experimentalbooks.pubpub.org/programme-overview\nPublishers catalogue demo: ScholarLed A catalogue of ScholarLed presses built on a Quarto / Jupyter Notebook model for computational publishing. The publication is automatically updated daily to reflect any new books added by the publishers.\nProof of concept #1 - Computational Publication: Computational Publishing for Collections - ADA CP Prototype #1 - Nov 22\nProof of concept #2 - To be confirmed, completion for end of April 2023. This contains all parts fully rendered: Cover, colophon, essay, collection, graph, TIB AV Portal, Semantic Kompakkt\nsemanticClimate: To be confirmed - customised research papers readers made for regional climate change action plans based on IPCC reports and sourcing content from open research repositories.\nFSCI Summer School - publishing from collections class: To be confirmed, July 2023\n\n\nThis work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License."
  },
  {
    "objectID": "colophon.html",
    "href": "colophon.html",
    "title": "Colophon",
    "section": "",
    "text": "Fork title - Publishing Task\nAuthor - Tuku\nORCID -\nDate - April 27, 2023\nDOI - https://doi.org/10.5281/zenodo.7872070\nRepository URL - https://github.com/mloran/catalogue-003"
  },
  {
    "objectID": "collection003.html#part-of-the-series-italian-paintings",
    "href": "collection003.html#part-of-the-series-italian-paintings",
    "title": "Catalogue Experiment: Italian Paitings",
    "section": "Part of the series: Italian Paintings",
    "text": "Part of the series: Italian Paintings\n\nClass instructions and all links: https://nfdi4culture.github.io/class-ADA-CP-pipeline/\nDemo publication: https://nfdi4culture.github.io/catalogue-003/\nRepo link: https://github.com/NFDI4Culture/catalogue-003"
  },
  {
    "objectID": "collection003.html#author",
    "href": "collection003.html#author",
    "title": "Catalogue Experiment: Italian Paitings",
    "section": "Author:",
    "text": "Author:\n\nMemo Loran Tuku"
  },
  {
    "objectID": "collection003.html#topic",
    "href": "collection003.html#topic",
    "title": "Catalogue Experiment: Italian Paitings",
    "section": "Topic",
    "text": "Topic\nDieses SPARQL-Query wird verwendet, um eine Liste von Gemälden abzurufen, die von italienischen Künstlern geschaffen wurden und deren Ursprungsort in Italien liegt. Es gibt fünf Variablen, die zurückgegeben werden:\n?painting: die URI des Gemäldes ?paintingLabel: der Label (Name) des Gemäldes in Deutsch ?artist: die URI des Künstlers ?artistLabel: der Label (Name) des Künstlers in Deutsch ?originLabel: der Label (Name) des Ursprungsortes des Gemäldes in Deutsch Das Query wird auf Wikidata ausgeführt und nutzt die Wikidata Query Service-API. Um die Labels in Deutsch anzuzeigen, wird der Service wikibase:label verwendet, mit dem Parameter wikibase:language auf “de” gesetzt.\nhttps://openai.com/blog/chatgpt\nhttps://www.perplexity.ai/"
  },
  {
    "objectID": "paintings_1tuku.html",
    "href": "paintings_1tuku.html",
    "title": "Activity: Paintings catalogue in Jupyter Notebook",
    "section": "",
    "text": "Objective: Make a selection of nine paintings for the exhibition catalogue to be selected from Wikidata and rendered multi-format in Quarto.\nKeyError: 'item'\nThe below Python code uses SPARQLWrapper to retrieve data from Wikidata based on a SPARQL query."
  },
  {
    "objectID": "collection_1tuku.html",
    "href": "collection_1tuku.html",
    "title": "pip install sparqlwrapper",
    "section": "",
    "text": "# https://rdflib.github.io/sparqlwrapper/\n\nimport sys\nfrom SPARQLWrapper import SPARQLWrapper, JSON\n\nfrom PIL import Image\nimport requests\n\nendpoint_url = \"https://query.wikidata.org/sparql\"\n\nquery = \"\"\"SELECT ?painting ?paintingLabel ?artist ?artistLabel ?originLabel ?image WHERE {\n  ?painting wdt:P31 wd:Q3305213;\n    wdt:P170 ?artist;\n    wdt:P276 ?origin.\n  ?artist wdt:P27 wd:Q38.\n  ?origin wdt:P17 wd:Q38.\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"de\". }\n  OPTIONAL { ?painting wdt:P18 ?image. }\n}\nLIMIT 9\"\"\"\n\n# SUBROUTINES\n\ndef get_delay(date):\n    try:\n        date = datetime.datetime.strptime(date, '%a, %d %b %Y %H:%M:%S GMT')\n        timeout = int((date - datetime.datetime.now()).total_seconds())\n    except ValueError:\n        timeout = int(date)\n    return timeout\n\ndef get_image(url, headers):\n    r = requests.get(url, headers=headers, stream=True)\n    if r.status_code == 200:\n        im = Image.open(r.raw)\n        return im\n    if r.status_code == 500:\n        return None\n    if r.status_code == 403:\n        return None\n    if r.status_code == 429:\n        timeout = get_delay(r.headers['retry-after'])\n        print('Timeout {} m {} s'.format(timeout // 60, timeout % 60))\n        time.sleep(timeout)\n        get_image(url, headers)\n\ndef get_results(endpoint_url, query):\n    user_agent = \"WDQS-example Python/%s.%s\" % (sys.version_info[0], sys.version_info[1])\n    # TODO adjust user agent; see https://w.wiki/CX6\n    sparql = SPARQLWrapper(endpoint_url, agent=user_agent)\n    sparql.setQuery(query)\n    sparql.setReturnFormat(JSON)\n    return sparql.query().convert()\n\n# MAIN PROGRAM\n\nresults = get_results(endpoint_url, query)\n\nfor result in results[\"results\"][\"bindings\"]:\n    print('Wikidata link: ' + '[' + result['painting']['value'] + ']' + '(' + result['painting']['value'] + ')' + '\\n')\n    print('Title: ' + result['paintingLabel']['value'] + '\\n')\n    print('Creator: ' + result['artistLabel']['value'] + '\\n')\n\n    if 'image' in result:\n      # get image from image URL and display resized version\n      image_url=result['image']['value']\n      headers = {'User-Agent': 'Ex_Books_conference_bot/0.0 (https://github.com/SimonXIX/Experimental_Books_workshop; ad7588@coventry.ac.uk)'}\n      im = get_image(image_url, headers)\n      im.thumbnail((500, 500), Image.Resampling.LANCZOS)\n      display(im)\n    print('\\n\\n')\n\nWikidata link: [http://www.wikidata.org/entity/Q28803748](http://www.wikidata.org/entity/Q28803748)\n\nTitle: Q28803748\n\nCreator: Giovanni Benedetto Castiglione\n\n\n\nAttributeError: module 'PIL.Image' has no attribute 'Resampling'"
  }
]